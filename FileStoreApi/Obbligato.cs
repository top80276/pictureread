using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;

/*
[assembly: AssemblyVersion("1.0.0.1")] 
[assembly: AssemblyTitle("FileStore")] 
[assembly: AssemblyDescription("FileStore Build Date:2022/12/27 上午 11:32:44")] 
[assembly: AssemblyCompany("周敬斐 (mahler chou)")] 
[assembly: AssemblyProduct("Obbligato ..")] 
[assembly: AssemblyCopyright("周敬斐 作品 (Mahler Works), Copyright 2005, 周敬斐(Mahler)")] 
[assembly: AssemblyTrademark("Thanks Jamy, Doris, and Carol for a great story.")] 
*/


/**********************************************************************************************************************
 *Default Package
**********************************************************************************************************************/
namespace DB
{
    /*
     * Obbligato 
     * 
     * Service Provider for classes.
     *  
     * 2005/06/30
     * 2016/10/11 To support multi-DB, move base library into client's namespace. 
     * 2017/04/14 v6.2 : 
     *   1. Add command timeout to DataProvider
     *   2. Make sure there is only one copy in generated code.
     *   3. Remove SpSuccessException, it causes performance degrading.
	 * 2020/01/27 v7.0 :
	 *   1. Removing SpFailException, SpDuplicateException, SpNotFoundException, SpParameterException, SpOtherException
     */

    using System.Data;
    using System.Data.SqlClient;

    /// <summary>
    /// Each parameter class must implement this interface for validating parameters.
    /// </summary>
    internal interface IRowData
    {
        /// <summary>
        /// Validate function for parameters.
        /// </summary>
        void IsValidate();
    }

    /// <summary>
    /// Provides database manipulation to Obbligato classes.
    /// </summary>
    public class DataProvider
    {
        /// <summary>
        /// Connection string.
        /// </summary>
        public static string ConnectionString = "data source=172.16.110.16;initial catalog=FileStore;user id=sa;persist security info=True;password=a@t123;workstation id=AAT-MAHLER-NB;packet size=4096;";

        /// <summary>
        /// Command Timeout time.
        /// </summary>
        public static int CommandTimeout = 60;

        public static System.Data.SqlClient.SqlCommand getSpCommand(string spName)
        {
            SqlConnection conn = new SqlConnection(ConnectionString);
            conn.Open();

            SqlCommand cmd = new SqlCommand();
            cmd.Connection = conn;
            cmd.CommandTimeout = CommandTimeout;
            cmd.CommandText = spName;
            cmd.CommandType = CommandType.StoredProcedure;
            return cmd;
        }
    }


    /// <summary>
    /// (Stored Procedure Classe, sp_fs_fileinfo_add) 
    /// Add new file information., Generated by Obbligato v.9.0a, 2022/12/27 上午 11:32:44
    /// </summary>
    public sealed class sp_fs_fileinfo_add
    {
        /// <summary>
        /// Execute the stored procedure [sp_fs_fileinfo_add] with no return.
        /// </summary>
        public static void Execute(Param objP)
        {
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_fs_fileinfo_add");

            SqlParameter pTmp = null;
            //Parameter @fs_id
            pTmp = new SqlParameter("@fs_id", SqlDbType.UniqueIdentifier);
            pTmp.Value = objP.fs_id;
            cmd.Parameters.Add(pTmp);

            //Parameter @stream_id
            pTmp = new SqlParameter("@stream_id", SqlDbType.UniqueIdentifier);
            pTmp.Value = objP.stream_id;
            cmd.Parameters.Add(pTmp);

            //Parameter @origin_path
            pTmp = new SqlParameter("@origin_path", SqlDbType.NVarChar);
            pTmp.Value = objP.origin_path;
            cmd.Parameters.Add(pTmp);

            //Parameter @origin_name
            pTmp = new SqlParameter("@origin_name", SqlDbType.NVarChar);
            pTmp.Value = objP.origin_name;
            cmd.Parameters.Add(pTmp);

            //Parameter @content_type
            pTmp = new SqlParameter("@content_type", SqlDbType.NVarChar);
            pTmp.Value = objP.content_type;
            cmd.Parameters.Add(pTmp);

            //Parameter @file_size
            pTmp = new SqlParameter("@file_size", SqlDbType.Int);
            pTmp.Value = objP.file_size;
            cmd.Parameters.Add(pTmp);

            //Parameter @ref_no
            pTmp = new SqlParameter("@ref_no", SqlDbType.NVarChar);
            pTmp.Value = objP.ref_no;
            cmd.Parameters.Add(pTmp);

            try
            {
                cmd.ExecuteNonQuery();
            }
            finally
            {
                cmd.Connection.Close();
            }
        }

        /// <summary>
        /// Parameter class of sp_fs_fileinfo_add. Add new file information.
        /// </summary>
        public sealed class Param
        {
            /// <summary>
            /// Default: Type:System.Guid Length:0, Nullable: Yes
            /// </summary>
            public System.Guid? fs_id { get; set; }

            /// <summary>
            /// Default: Type:System.Guid Length:0, Nullable: Yes
            /// </summary>
            public System.Guid? stream_id { get; set; }

            /// <summary>
            /// Default: Type:System.String Length:255, Nullable: No
            /// </summary>
            public string origin_path { get; set; }

            /// <summary>
            /// Default: Type:System.String Length:255, Nullable: No
            /// </summary>
            public string origin_name { get; set; }

            /// <summary>
            /// Default: Type:System.String Length:100, Nullable: No
            /// </summary>
            public string content_type { get; set; }

            /// <summary>
            /// Default:0 Type:System.Int32 Length:10, Nullable: No
            /// </summary>
            public int file_size { get; set; }

            /// <summary>
            /// Default: Type:System.String Length:100, Nullable: No
            /// </summary>
            public string ref_no { get; set; }

        }
    }
    /// <summary>
    /// (Stored Procedure Classe, sp_fs_fileinfo_del) 
    /// Delete file info, Generated by Obbligato v.9.0a, 2022/12/27 上午 11:32:44
    /// </summary>
    public sealed class sp_fs_fileinfo_del
    {
        /// <summary>
        /// Execute the stored procedure [sp_fs_fileinfo_del] with no return.
        /// </summary>
        public static void Execute(Param objP)
        {
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_fs_fileinfo_del");

            SqlParameter pTmp = null;
            //Parameter @fs_id
            pTmp = new SqlParameter("@fs_id", SqlDbType.UniqueIdentifier);
            pTmp.Value = objP.fs_id;
            cmd.Parameters.Add(pTmp);

            try
            {
                cmd.ExecuteNonQuery();
            }
            finally
            {
                cmd.Connection.Close();
            }
        }

        /// <summary>
        /// Parameter class of sp_fs_fileinfo_del. Delete file info
        /// </summary>
        public sealed class Param
        {
            /// <summary>
            /// Default: Type:System.Guid Length:0, Nullable: Yes
            /// </summary>
            public System.Guid? fs_id { get; set; }

        }
    }
    /// <summary>
    /// (Stored Procedure Classe, sp_fs_fileinfo_get) 
    /// Get file info, Generated by Obbligato v.9.0a, 2022/12/27 上午 11:32:44
    /// </summary>
    public sealed class sp_fs_fileinfo_get
    {
        /// <summary>
        /// Execute the stored procedure [sp_fs_fileinfo_get], and return a row array.
        /// </summary>
        public static Row[] ExecuteArr(Param objP)
        {
            Row[] objArr = new Row[0];
            System.Collections.ArrayList oResult = new System.Collections.ArrayList();
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_fs_fileinfo_get");
            // User Added Parameter
            SqlParameter pTmp;

            //Parameter @fs_id
            pTmp = new SqlParameter("@fs_id", SqlDbType.UniqueIdentifier);
            pTmp.Value = objP.fs_id;
            cmd.Parameters.Add(pTmp);

            try
            {
                SqlDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    Row r = new Row();
                    if (!Convert.IsDBNull(reader["fs_id"])) { r.fs_id = reader["fs_id"].ToString(); }
                    if (!Convert.IsDBNull(reader["stream_id"])) { r.stream_id = reader["stream_id"].ToString(); }
                    if (!Convert.IsDBNull(reader["origin_path"])) { r.origin_path = reader["origin_path"].ToString(); }
                    if (!Convert.IsDBNull(reader["origin_name"])) { r.origin_name = reader["origin_name"].ToString(); }
                    if (!Convert.IsDBNull(reader["content_type"])) { r.content_type = reader["content_type"].ToString(); }
                    if (!Convert.IsDBNull(reader["file_size"])) { r.file_size = reader["file_size"].ToString(); }
                    if (!Convert.IsDBNull(reader["ref_no"])) { r.ref_no = reader["ref_no"].ToString(); }
                    if (!Convert.IsDBNull(reader["update_dt"])) { r.update_dt = reader["update_dt"].ToString(); }
                    oResult.Add(r);
                }
                reader.Close();
            }
            finally
            {
                cmd.Connection.Close();
            }
            return (Row[])oResult.ToArray(typeof(Row));
        }

        /// <summary>
        /// Execute the stored procedure [sp_fs_fileinfo_get], and return a data table.
        /// </summary>
        public static DataTable ExecuteDt(Param objP)
        {
            DataTable DT = new DataTable();
            System.Collections.ArrayList oResult = new System.Collections.ArrayList();
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_fs_fileinfo_get");
            // User Added Parameter
            SqlParameter pTmp;

            //Parameter @fs_id
            pTmp = new SqlParameter("@fs_id", SqlDbType.UniqueIdentifier);
            pTmp.Value = objP.fs_id;
            cmd.Parameters.Add(pTmp);

            SqlDataAdapter DA = new SqlDataAdapter(cmd);
            try
            {
                DA.Fill(DT);
            }
            finally
            {
                cmd.Connection.Close();
            }
            return DT;
        }

        /// <summary>
        /// Parameter class of sp_fs_fileinfo_get. Get file info
        /// </summary>
        public sealed class Param
        {
            /// <summary>
            /// Default: Type:System.Guid Length:0, Nullable: Yes
            /// </summary>
            public System.Guid? fs_id { get; set; }

        }
        /// <summary>
        /// Result class of sp_fs_fileinfo_get. Get file info
        /// </summary>
        public class Row
        {
            /// <summary>
            /// , Type:System.Guid Length:-1, Nullable: Yes
            /// </summary>
            public string fs_id { get; set; }

            /// <summary>
            /// , Type:System.Guid Length:-1, Nullable: Yes
            /// </summary>
            public string stream_id { get; set; }

            /// <summary>
            /// , Type:System.String Length:-1, Nullable: Yes
            /// </summary>
            public string origin_path { get; set; }

            /// <summary>
            /// , Type:System.String Length:-1, Nullable: Yes
            /// </summary>
            public string origin_name { get; set; }

            /// <summary>
            /// , Type:System.String Length:-1, Nullable: Yes
            /// </summary>
            public string content_type { get; set; }

            /// <summary>
            /// , Type:System.Int32 Length:-1, Nullable: Yes
            /// </summary>
            public string file_size { get; set; }

            /// <summary>
            /// , Type:System.String Length:-1, Nullable: Yes
            /// </summary>
            public string ref_no { get; set; }

            /// <summary>
            /// , Type:System.DateTime Length:-1, Nullable: Yes
            /// </summary>
            public string update_dt { get; set; }

        }

    }
    /// <summary>
    /// (Stored Procedure Classe, sp_fs_root_path) 
    /// Get the root path of FileStore, Generated by Obbligato v.9.0a, 2022/12/27 上午 11:32:44
    /// </summary>
    public sealed class sp_fs_root_path
    {
        /// <summary>
        /// Execute the stored procedure [sp_fs_root_path] with scalar value return.
        /// </summary>
        public static string Execute(Param objP)
        {
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_fs_root_path");

            SqlParameter pTmp = null;
            //Parameter @ftable_name
            pTmp = new SqlParameter("@ftable_name", SqlDbType.NVarChar);
            pTmp.Value = objP.ftable_name;
            cmd.Parameters.Add(pTmp);

            try
            {
                string strResult = Convert.ToString(cmd.ExecuteScalar());
                return strResult;
            }
            finally
            {
                cmd.Connection.Close();
            }
        }

        /// <summary>
        /// Parameter class of sp_fs_root_path. Get the root path of FileStore
        /// </summary>
        public sealed class Param
        {
            /// <summary>
            /// Default: Type:System.String Length:128, Nullable: No
            /// </summary>
            public string ftable_name { get; set; }

        }
    }
    /// <summary>
    /// (Stored Procedure Classe, sp_fs_store_get_by_name) 
    /// Get information from file table, Generated by Obbligato v.9.0a, 2022/12/27 上午 11:32:44
    /// </summary>
    public sealed class sp_fs_store_get_by_name
    {
        /// <summary>
        /// Execute the stored procedure [sp_fs_store_get_by_name], and return a row array.
        /// </summary>
        public static Row[] ExecuteArr(Param objP)
        {
            Row[] objArr = new Row[0];
            System.Collections.ArrayList oResult = new System.Collections.ArrayList();
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_fs_store_get_by_name");
            // User Added Parameter
            SqlParameter pTmp;

            //Parameter @filename
            pTmp = new SqlParameter("@filename", SqlDbType.NVarChar);
            pTmp.Value = objP.filename;
            cmd.Parameters.Add(pTmp);

            try
            {
                SqlDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    Row r = new Row();
                    if (!Convert.IsDBNull(reader["stream_id"])) { r.stream_id = reader["stream_id"].ToString(); }
                    if (!Convert.IsDBNull(reader["name"])) { r.name = reader["name"].ToString(); }
                    if (!Convert.IsDBNull(reader["cached_file_size"])) { r.cached_file_size = reader["cached_file_size"].ToString(); }
                    if (!Convert.IsDBNull(reader["creation_time"])) { r.creation_time = reader["creation_time"].ToString(); }
                    oResult.Add(r);
                }
                reader.Close();
            }
            finally
            {
                cmd.Connection.Close();
            }
            return (Row[])oResult.ToArray(typeof(Row));
        }

        /// <summary>
        /// Execute the stored procedure [sp_fs_store_get_by_name], and return a data table.
        /// </summary>
        public static DataTable ExecuteDt(Param objP)
        {
            DataTable DT = new DataTable();
            System.Collections.ArrayList oResult = new System.Collections.ArrayList();
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_fs_store_get_by_name");
            // User Added Parameter
            SqlParameter pTmp;

            //Parameter @filename
            pTmp = new SqlParameter("@filename", SqlDbType.NVarChar);
            pTmp.Value = objP.filename;
            cmd.Parameters.Add(pTmp);

            SqlDataAdapter DA = new SqlDataAdapter(cmd);
            try
            {
                DA.Fill(DT);
            }
            finally
            {
                cmd.Connection.Close();
            }
            return DT;
        }

        /// <summary>
        /// Parameter class of sp_fs_store_get_by_name. Get information from file table
        /// </summary>
        public sealed class Param
        {
            /// <summary>
            /// Default: Type:System.String Length:255, Nullable: No
            /// </summary>
            public string filename { get; set; }

        }
        /// <summary>
        /// Result class of sp_fs_store_get_by_name. Get information from file table
        /// </summary>
        public class Row
        {
            /// <summary>
            /// , Type:System.Guid Length:-1, Nullable: Yes
            /// </summary>
            public string stream_id { get; set; }

            /// <summary>
            /// , Type:System.String Length:-1, Nullable: Yes
            /// </summary>
            public string name { get; set; }

            /// <summary>
            /// , Type:System.Int64 Length:-1, Nullable: Yes
            /// </summary>
            public string cached_file_size { get; set; }

            /// <summary>
            /// , Type:System.DateTimeOffset Length:-1, Nullable: Yes
            /// </summary>
            public string creation_time { get; set; }

        }

    }
    /// <summary>
    /// (Stored Procedure Classe, sp_fs_store_get_unc_path) 
    /// Get UNC path by stream_id, Generated by Obbligato v.9.0a, 2022/12/27 上午 11:32:44
    /// </summary>
    public sealed class sp_fs_store_get_unc_path
    {
        /// <summary>
        /// Execute the stored procedure [sp_fs_store_get_unc_path] with scalar value return.
        /// </summary>
        public static string Execute(Param objP)
        {
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_fs_store_get_unc_path");

            SqlParameter pTmp = null;
            //Parameter @stream_id
            pTmp = new SqlParameter("@stream_id", SqlDbType.UniqueIdentifier);
            pTmp.Value = objP.stream_id;
            cmd.Parameters.Add(pTmp);

            try
            {
                string strResult = Convert.ToString(cmd.ExecuteScalar());
                return strResult;
            }
            finally
            {
                cmd.Connection.Close();
            }
        }

        /// <summary>
        /// Parameter class of sp_fs_store_get_unc_path. Get UNC path by stream_id
        /// </summary>
        public sealed class Param
        {
            /// <summary>
            /// Default: Type:System.Guid Length:0, Nullable: Yes
            /// </summary>
            public System.Guid? stream_id { get; set; }

        }
    }
}


